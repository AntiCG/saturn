From c2d94dca557447cd14b63c76610a9db18c12eb79 Mon Sep 17 00:00:00 2001
From: Victor Yudin <victor@yudin.org>
Date: Thu, 31 May 2018 22:06:01 -0400
Subject: [PATCH] Revert "[Hd] Point picking via Hydra now returns the correct
 point index"

This reverts commit e0585191447605f8779b153a493494f810b8a6da.
---
 pxr/imaging/lib/glf/contextCaps.cpp         | 46 ++++++++++-------------------
 pxr/imaging/lib/glf/contextCaps.h           | 11 ++++---
 pxr/imaging/lib/hdSt/codeGen.cpp            | 27 ++---------------
 pxr/imaging/lib/hdSt/immediateDrawBatch.cpp | 25 +++++++---------
 pxr/imaging/lib/hdSt/indirectDrawBatch.cpp  | 42 ++++++++++----------------
 pxr/imaging/lib/hdSt/resourceBinder.cpp     |  2 +-
 pxr/imaging/lib/hdSt/shaders/pointId.glslfx |  5 +---
 7 files changed, 51 insertions(+), 107 deletions(-)

diff --git a/pxr/imaging/lib/glf/contextCaps.cpp b/pxr/imaging/lib/glf/contextCaps.cpp
index 14869d9b..431a156e 100644
--- a/pxr/imaging/lib/glf/contextCaps.cpp
+++ b/pxr/imaging/lib/glf/contextCaps.cpp
@@ -59,24 +59,19 @@ TF_DEFINE_ENV_SETTING(GLF_GLSL_VERSION, 0,
 GlfContextCaps::GlfContextCaps()
     : glVersion(0)
     , coreProfile(false)
-
     , maxUniformBlockSize(0)
     , maxShaderStorageBlockSize(0)
     , maxTextureBufferSize(0)
     , uniformBufferOffsetAlignment(0)
-
-    , shaderStorageBufferEnabled(false)
-    , bufferStorageEnabled(false)
-    , directStateAccessEnabled(false)
     , multiDrawIndirectEnabled(false)
+    , directStateAccessEnabled(false)
+    , bufferStorageEnabled(false)
+    , shaderStorageBufferEnabled(false)
     , bindlessTextureEnabled(false)
     , bindlessBufferEnabled(false)
-
     , glslVersion(400)
     , explicitUniformLocation(false)
     , shadingLanguage420pack(false)
-    , shaderDrawParametersEnabled(false)
-
     , copyBufferEnabled(true)
 {
 }
@@ -109,14 +104,13 @@ GlfContextCaps::_LoadCaps()
     // note that this function is called without GL context, in some unit tests.
 
     shaderStorageBufferEnabled   = false;
-    bufferStorageEnabled         = false;
-    directStateAccessEnabled     = false;
-    multiDrawIndirectEnabled     = false;
     bindlessTextureEnabled       = false;
     bindlessBufferEnabled        = false;
-    explicitUniformLocation      = false;
+    multiDrawIndirectEnabled     = false;
+    directStateAccessEnabled     = false;
+    bufferStorageEnabled         = false;
     shadingLanguage420pack       = false;
-    shaderDrawParametersEnabled  = false;
+    explicitUniformLocation      = false;
     maxUniformBlockSize          = 16*1024;      // GL spec minimum
     maxShaderStorageBlockSize    = 16*1024*1024; // GL spec minimum
     maxTextureBufferSize         = 64*1024;      // GL spec minimum
@@ -185,9 +179,6 @@ GlfContextCaps::_LoadCaps()
         multiDrawIndirectEnabled = true;
         directStateAccessEnabled = true;
     }
-    if (glVersion >= 460) {
-        shaderDrawParametersEnabled = true;
-    }
 
     // initialize by individual extension.
     if (GLEW_ARB_bindless_texture && glMakeTextureHandleResidentNV) {
@@ -209,9 +200,6 @@ GlfContextCaps::_LoadCaps()
     if (GLEW_ARB_direct_state_access) {
         directStateAccessEnabled = true;
     }
-    if (GLEW_ARB_shader_draw_parameters) {
-        shaderDrawParametersEnabled = true;
-    }
 #endif
     if (GLEW_EXT_direct_state_access) {
         directStateAccessEnabled = true;
@@ -240,12 +228,12 @@ GlfContextCaps::_LoadCaps()
         glslVersion = std::min(glslVersion, TfGetEnvSetting(GLF_GLSL_VERSION));
 
         // downgrade to the overridden GLSL version
-        shadingLanguage420pack      &= (glslVersion >= 420);
-        explicitUniformLocation     &= (glslVersion >= 430);
-        bindlessTextureEnabled      &= (glslVersion >= 430);
-        bindlessBufferEnabled       &= (glslVersion >= 430);
-        shaderStorageBufferEnabled  &= (glslVersion >= 430);
-        shaderDrawParametersEnabled &= (glslVersion >= 460);
+        explicitUniformLocation    &= (glslVersion >= 430);
+        bindlessTextureEnabled     &= (glslVersion >= 430);
+        bindlessBufferEnabled      &= (glslVersion >= 430);
+        shaderStorageBufferEnabled &= (glslVersion >= 430);
+
+        shadingLanguage420pack     &= (glslVersion >= 420);
     }
 
     // For driver issues workaround
@@ -269,17 +257,15 @@ GlfContextCaps::_LoadCaps()
             <<    maxTextureBufferSize << "\n"
             << "  GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = "
             <<    uniformBufferOffsetAlignment << "\n"
-            // order alphabetically
+
             << "  ARB_bindless_texture               = "
             <<    bindlessTextureEnabled << "\n"
-            << "  ARB_direct_state_access            = "
-            <<    directStateAccessEnabled << "\n"
             << "  ARB_explicit_uniform_location      = "
             <<    explicitUniformLocation << "\n"
             << "  ARB_multi_draw_indirect            = "
             <<    multiDrawIndirectEnabled << "\n"
-            << "  ARB_shader_draw_parameters   = "
-            <<    shaderDrawParametersEnabled << "\n"
+            << "  ARB_direct_state_access            = "
+            <<    directStateAccessEnabled << "\n"
             << "  ARB_shader_storage_buffer_object   = "
             <<    shaderStorageBufferEnabled << "\n"
             << "  ARB_shading_language_420pack       = "
diff --git a/pxr/imaging/lib/glf/contextCaps.h b/pxr/imaging/lib/glf/contextCaps.h
index 476efb90..7a68be5f 100644
--- a/pxr/imaging/lib/glf/contextCaps.h
+++ b/pxr/imaging/lib/glf/contextCaps.h
@@ -69,20 +69,19 @@ public:
     int maxTextureBufferSize;
     int uniformBufferOffsetAlignment;
 
-    // GL extensions (ordered by version)
-    bool shaderStorageBufferEnabled;  // ARB_shader_storage_buffer_object (4.3)
-    bool bufferStorageEnabled;        // ARB_buffer_storage               (4.4)
-    bool directStateAccessEnabled;    // ARB_direct_state_access          (4.5)
+    // GL extensions
     bool multiDrawIndirectEnabled;    // ARB_multi_draw_indirect          (4.5)
+    bool directStateAccessEnabled;    // ARB_direct_state_access          (4.5)
+    bool bufferStorageEnabled;        // ARB_buffer_storage               (4.4)
+    bool shaderStorageBufferEnabled;  // ARB_shader_storage_buffer_object (4.3)
 
     bool bindlessTextureEnabled;      // ARB_bindless_texture
     bool bindlessBufferEnabled;       // NV_shader_buffer_load
 
-    // GLSL version and extensions 
+    // GLSL version and extensions
     int glslVersion;                  // 400, 410, ...
     bool explicitUniformLocation;     // ARB_explicit_uniform_location    (4.3)
     bool shadingLanguage420pack;      // ARB_shading_language_420pack     (4.2)
-    bool shaderDrawParametersEnabled; // ARB_shader_draw_parameters       (4.5)
 
     // workarounds for driver issues
     bool copyBufferEnabled;
diff --git a/pxr/imaging/lib/hdSt/codeGen.cpp b/pxr/imaging/lib/hdSt/codeGen.cpp
index 0a403765..4f2b2c81 100644
--- a/pxr/imaging/lib/hdSt/codeGen.cpp
+++ b/pxr/imaging/lib/hdSt/codeGen.cpp
@@ -426,9 +426,6 @@ HdSt_CodeGen::Compile()
     if (caps.bindlessTextureEnabled) {
         _genCommon << "#extension GL_ARB_bindless_texture : require\n";
     }
-    if (caps.glslVersion < 460 && caps.shaderDrawParametersEnabled) {
-        _genCommon << "#extension GL_ARB_shader_draw_parameters : require\n";
-    }
     if (caps.glslVersion < 430 && caps.explicitUniformLocation) {
         _genCommon << "#extension GL_ARB_explicit_uniform_location : require\n";
     }
@@ -1334,7 +1331,6 @@ HdSt_CodeGen::_GenerateDrawingCoord()
        struct hd_drawingCoord {
            int modelCoord;          // (reserved) model parameters
            int constantCoord;       // constant primvars (per object)
-           int vertexCoord;         // vertex primvars   (per vertex)
            int elementCoord;        // element primvars  (per face/curve)
            int primitiveCoord;      // primitive ids     (per tri/quad/line)
            int fvarCoord;           // fvar primvars     (per face-vertex)
@@ -1428,7 +1424,6 @@ HdSt_CodeGen::_GenerateDrawingCoord()
     _genCommon << "struct hd_drawingCoord {                       \n"
                << "  int modelCoord;                              \n"
                << "  int constantCoord;                           \n"
-               << "  int vertexCoord;                             \n"
                << "  int elementCoord;                            \n"
                << "  int primitiveCoord;                          \n"
                << "  int fvarCoord;                               \n"
@@ -1443,11 +1438,11 @@ HdSt_CodeGen::_GenerateDrawingCoord()
 
     // [immediate]
     //   layout (location=x) uniform ivec4 drawingCoord0;
-    //   layout (location=y) uniform ivec4 drawingCoord1;
+    //   layout (location=y) uniform ivec3 drawingCoord1;
     //   layout (location=z) uniform int   drawingCoordI[N];
     // [indirect]
     //   layout (location=x) in ivec4 drawingCoord0
-    //   layout (location=y) in ivec4 drawingCoord1
+    //   layout (location=y) in ivec3 drawingCoord1
     //   layout (location=z) in int   drawingCoordI[N]
     _EmitDeclaration(_genVS, _metaData.drawingCoord0Binding);
     _EmitDeclaration(_genVS, _metaData.drawingCoord1Binding);
@@ -1522,7 +1517,6 @@ HdSt_CodeGen::_GenerateDrawingCoord()
            << "  dc.primitiveCoord = drawingCoord0.w; \n"
            << "  dc.fvarCoord      = drawingCoord1.x; \n"
            << "  dc.shaderCoord    = drawingCoord1.z; \n"
-           << "  dc.vertexCoord    = drawingCoord1.w; \n"
            << "  dc.instanceIndex  = GetInstanceIndex().indices;\n";
 
     if (_metaData.drawingCoordIBinding.binding.IsValid()) {
@@ -2339,23 +2333,6 @@ HdSt_CodeGen::_GenerateVertexPrimvar()
     _genFS << "vec4 GetPatchCoord() { return GetPatchCoord(0); }\n";
 
     _genGS << "vec4 GetPatchCoord(int localIndex);\n";
-
-    // VS specific accessor for the "vertex drawing coordinate"
-    // Even though we currently always plumb vertexCoord as part of the drawing
-    // coordinate, we expect clients to use this accessor when querying the base
-    // vertex offset for a draw call.
-    GlfContextCaps const &caps = GlfContextCaps::GetInstance();
-    _genVS << "int GetBaseVertexOffset() {\n";
-    if (caps.shaderDrawParametersEnabled) {
-        if (caps.glslVersion < 460) { // use ARB extension
-            _genVS << "  return gl_BaseVertexARB;\n";
-        } else {
-            _genVS << "  return gl_BaseVertex;\n";
-        }
-    } else {
-        _genVS << "  return GetDrawingCoord().vertexCoord;\n";
-    }
-    _genVS << "}\n";
 }
 
 void
diff --git a/pxr/imaging/lib/hdSt/immediateDrawBatch.cpp b/pxr/imaging/lib/hdSt/immediateDrawBatch.cpp
index 487bd63c..41519c64 100644
--- a/pxr/imaging/lib/hdSt/immediateDrawBatch.cpp
+++ b/pxr/imaging/lib/hdSt/immediateDrawBatch.cpp
@@ -326,28 +326,26 @@ HdSt_ImmediateDrawBatch::ExecuteDraw(
           ----------------------------------------------------------------------
           | 0 | ModelDC       |  (reserved)  |    uniform     |    constant    |
           | 1 | ConstantDC    |  constantBar |    uniform     |    constant    |
-          | 2 | VertexDC      |  vertexBar   |gl_BaseVertex(^)| vertex/varying |
-          | 3 | ElementDC     |  elementBar  |       (*)      |    uniform     |
-          | 4 | PrimitiveDC   |  indexBar    | gl_PrimitiveID |       (*)      |
-          | 5 | FVarDC        |  fvarBar     | gl_PrimitiveID |    facevarying |
-          | 6 | InstanceIndex |  inst-idxBar | (gl_InstanceID)|      n/a       |
+          | 2 | ElementDC     |  elementBar  |       (*)      |    uniform     |
+          | 3 | PrimitiveDC   |  indexBar    | gl_PrimitiveID |       (*)      |
+          | 4 | FVarDC        |  fvarBar     | gl_PrimitiveID |    facevarying |
+          | 5 | InstanceIndex |  inst-idxBar | (gl_InstanceID)|      n/a       |
           | 7 | ShaderDC      |  shaderBar   |    uniform     |                |
           | 8 | InstanceDC[0] |  instanceBar | (gl_InstanceID)|    constant    |
           | 9 | InstanceDC[1] |  instanceBar | (gl_InstanceID)|    constant    |
           |...| ...           |  instanceBar | (gl_InstanceID)|    constant    |
           ----------------------------------------------------------------------
+          | - | VertexBase    |  vertexBar   |  gl_VertexID   | vertex/varying |
 
           We put these offsets into 3 variables,
-           - ivec4 drawingCoord0  {ModelDC, ConstantDC, ElementDC, PrimitiveDC}
-           - ivec4 drawingCoord1  {FVarDC, InstanceIndex, ShaderDC, VertexDC}
+           - ivec4 drawingCoord0  (ModelDC - PrimitiveDC)
+           - ivec3 drawingCoord1  (FVarDC - ShaderDC)
            - int[] drawingCoordI  (InstanceDC)
           so that the shaders can access any of these aggregated data.
 
-          (^) gl_BaseVertex requires GLSL 4.60 or the ARB_shader_draw_parameters
-              extension. We simply plumb the baseVertex(Offset) as a generic 
-              solution.
           (*) primitiveParam buffer can be used to reinterpret GL-primitive
               ID back to element ID.
+
          */
 
         int vertexOffset = 0;
@@ -380,14 +378,13 @@ HdSt_ImmediateDrawBatch::ExecuteDraw(
             elementBar  ? elementBar->GetOffset()  : 0,
             indexBar    ? indexBar->GetOffset()    : 0
         };
-        int drawingCoord1[4] = {
+        int drawingCoord1[3] = {
             fvarBar          ? fvarBar->GetOffset()          : 0,
             instanceIndexBar ? instanceIndexBar->GetOffset() : 0,
-            shaderBar        ? shaderBar->GetIndex()         : 0,
-            baseVertex
+            shaderBar        ? shaderBar->GetIndex()         : 0
         };
         binder.BindUniformi(HdTokens->drawingCoord0, 4, drawingCoord0);
-        binder.BindUniformi(HdTokens->drawingCoord1, 4, drawingCoord1);
+        binder.BindUniformi(HdTokens->drawingCoord1, 3, drawingCoord1);
 
         // instance coordinates
         std::vector<int> instanceDrawingCoords(instancerNumLevels);
diff --git a/pxr/imaging/lib/hdSt/indirectDrawBatch.cpp b/pxr/imaging/lib/hdSt/indirectDrawBatch.cpp
index 4f128443..afe3bf2d 100644
--- a/pxr/imaging/lib/hdSt/indirectDrawBatch.cpp
+++ b/pxr/imaging/lib/hdSt/indirectDrawBatch.cpp
@@ -202,7 +202,7 @@ HdSt_IndirectDrawBatch::_CompileBatch(
 
     // drawcommand is configured as one of followings:
     //
-    // DrawArrays + XFB culling  : 13 integers (+ numInstanceLevels)
+    // DrawArrays + XFB culling  : 12 integers (+ numInstanceLevels)
     struct _DrawArraysCommand {
         GLuint count;
         GLuint instanceCount;
@@ -221,10 +221,9 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         GLuint fvarDC;
         GLuint instanceIndexDC;
         GLuint shaderDC;
-        GLuint vertexDC;
     };
 
-    // DrawArrays + Instance culling : 16 integers (+ numInstanceLevels)
+    // DrawArrays + Instance culling : 15 integers (+ numInstanceLevels)
     struct _DrawArraysInstanceCullCommand {
         GLuint count;
         GLuint instanceCount;
@@ -241,10 +240,9 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         GLuint fvarDC;
         GLuint instanceIndexDC;
         GLuint shaderDC;
-        GLuint vertexDC;
     };
 
-    // DrawElements + XFB culling : 13 integers (+ numInstanceLevels)
+    // DrawElements + XFB culling : 12 integers (+ numInstanceLevels)
     struct _DrawElementsCommand {
         GLuint count;
         GLuint instanceCount;
@@ -258,10 +256,9 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         GLuint fvarDC;
         GLuint instanceIndexDC;
         GLuint shaderDC;
-        GLuint vertexDC;
     };
 
-    // DrawElements + Instance culling : 17 integers (+ numInstanceLevels)
+    // DrawElements + Instance culling : 16 integers (+ numInstanceLevels)
     struct _DrawElementsInstanceCullCommand {
         GLuint count;
         GLuint instanceCount;
@@ -279,7 +276,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         GLuint fvarDC;
         GLuint instanceIndexDC;
         GLuint shaderDC;
-        GLuint vertexDC;
     };
 
     // Count the number of visible items. We may actually draw fewer
@@ -418,7 +414,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         // drawing coordinates.
         GLuint modelDC         = 0; // reserved for future extension
         GLuint constantDC      = constantBar ? constantBar->GetIndex() : 0;
-        GLuint vertexDC        = vertexOffset;
         GLuint elementDC       = elementBar ? elementBar->GetOffset() : 0;
         GLuint primitiveDC     = indexBar ? indexBar->GetOffset() : 0;
         GLuint fvarDC          = fvarBar ? fvarBar->GetOffset() : 0;
@@ -453,7 +448,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 *cmdIt++ = fvarDC;
                 *cmdIt++ = instanceIndexDC;
                 *cmdIt++ = shaderDC;
-                *cmdIt++ = vertexDC;
             } else {
                 *cmdIt++ = vertexCount;
                 *cmdIt++ = instanceCount;
@@ -467,7 +461,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 *cmdIt++ = fvarDC;
                 *cmdIt++ = instanceIndexDC;
                 *cmdIt++ = shaderDC;
-                *cmdIt++ = vertexDC;
             }
         } else {
             if (_useGpuInstanceCulling) {
@@ -487,7 +480,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 *cmdIt++ = fvarDC;
                 *cmdIt++ = instanceIndexDC;
                 *cmdIt++ = shaderDC;
-                *cmdIt++ = vertexDC;
             } else {
                 *cmdIt++ = indicesCount;
                 *cmdIt++ = instanceCount;
@@ -501,7 +493,6 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 *cmdIt++ = fvarDC;
                 *cmdIt++ = instanceIndexDC;
                 *cmdIt++ = shaderDC;
-                *cmdIt++ = vertexDC;
             }
         }
         for (size_t i = 0; i < instancerNumLevels; ++i) {
@@ -549,7 +540,7 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 offsetof(_DrawArraysInstanceCullCommand, modelDC));
             // drawing coords 1
             _dispatchBuffer->AddBufferResourceView(
-                HdTokens->drawingCoord1, {HdTypeInt32Vec4, 1},
+                HdTokens->drawingCoord1, {HdTypeInt32Vec3, 1},
                 offsetof(_DrawArraysInstanceCullCommand, fvarDC));
             // instance drawing coords
             if (instancerNumLevels > 0) {
@@ -569,7 +560,7 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 offsetof(_DrawArraysCommand, modelDC));
             // drawing coords 1
             _dispatchBuffer->AddBufferResourceView(
-                HdTokens->drawingCoord1, {HdTypeInt32Vec4, 1},
+                HdTokens->drawingCoord1, {HdTypeInt32Vec3, 1},
                 offsetof(_DrawArraysCommand, fvarDC));
             // instance drawing coords
             if (instancerNumLevels > 0) {
@@ -591,7 +582,7 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 offsetof(_DrawElementsInstanceCullCommand, modelDC));
             // drawing coords 1
             _dispatchBuffer->AddBufferResourceView(
-                HdTokens->drawingCoord1, {HdTypeInt32Vec4, 1},
+                HdTokens->drawingCoord1, {HdTypeInt32Vec3, 1},
                 offsetof(_DrawElementsInstanceCullCommand, fvarDC));
             // instance drawing coords
             if (instancerNumLevels > 0) {
@@ -611,7 +602,7 @@ HdSt_IndirectDrawBatch::_CompileBatch(
                 offsetof(_DrawElementsCommand, modelDC));
             // drawing coords 1
             _dispatchBuffer->AddBufferResourceView(
-                HdTokens->drawingCoord1, {HdTypeInt32Vec4, 1},
+                HdTokens->drawingCoord1, {HdTypeInt32Vec3, 1},
                 offsetof(_DrawElementsCommand, fvarDC));
             // instance drawing coords
             if (instancerNumLevels > 0) {
@@ -643,12 +634,12 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         // READ THIS CAREFULLY whenever you try to add/remove/shuffle
         // the drawing coordinate struct.
         //
-        // We use (GL_INT, 3) as a type of drawingCoord1 for GPU culling.
-        // Because drawingCoord1 is defined as 4 integers struct,
+        // We use (GL_INT, 2) as a type of drawingCoord1 for GPU culling.
+        // Because drawingCoord1 is defined as 3 integers struct,
+        //
         //   GLuint fvarDC;
         //   GLuint instanceIndexDC;
         //   GLuint shaderDC;
-        //   GLuint vertexDC;
         //
         // And CodeGen generates GetInstanceIndexCoord() as
         //
@@ -659,12 +650,9 @@ HdSt_IndirectDrawBatch::_CompileBatch(
         // We prefer smaller number of attributes to be processed in
         // the vertex input assembler, which in general gives a better
         // performance especially in older hardware. In this case we can't
-        // skip fvarDC without changing CodeGen logic, but we can
-        // skip shaderDC and vertexDC for culling.
+        // skip fvarDC without changing CodeGen logic, but we can skip
+        // shaderDC for culling.
         //
-        // XXX: Reorder members of drawingCoord0 and drawingCoord1 in CodeGen,
-        // so we can minimize the vertex attributes fetched during culling.
-        // 
         if (_useDrawArrays) {
             if (_useGpuInstanceCulling) {
                 // cull indirect command
@@ -1634,14 +1622,14 @@ HdSt_IndirectDrawBatch::_CullingProgram::_Link(
             "gl_SkipComponents4",  // firstIndex - modelDC
                                    // (includes __reserved_0 to match drawElementsOutput)
             "gl_SkipComponents4",  // constantDC - fvarDC
-            "gl_SkipComponents3",  // instanceIndexDC - vertexDC
+            "gl_SkipComponents2",  // instanceIndexDC - shaderDC
         };
         const char *drawElementsOutputs[] = {
             "gl_SkipComponents1",  // count
             "resultInstanceCount", // instanceCount
             "gl_SkipComponents4",  // firstIndex - modelDC
             "gl_SkipComponents4",  // constantDC - fvarDC
-            "gl_SkipComponents3",  // instanceIndexDC - vertexDC
+            "gl_SkipComponents2",  // instanceIndexDC - shaderDC
         };
         const char **outputs = _useDrawArrays
             ? drawArraysOutputs
diff --git a/pxr/imaging/lib/hdSt/resourceBinder.cpp b/pxr/imaging/lib/hdSt/resourceBinder.cpp
index f99ba46c..35b64c62 100644
--- a/pxr/imaging/lib/hdSt/resourceBinder.cpp
+++ b/pxr/imaging/lib/hdSt/resourceBinder.cpp
@@ -373,7 +373,7 @@ HdSt_ResourceBinder::ResolveBindings(HdStDrawItem const *drawItem,
     _bindingMap[HdTokens->drawingCoord1] = drawingCoord1Binding;
     metaDataOut->drawingCoord1Binding =
         MetaData::BindingDeclaration(/*name=*/HdTokens->drawingCoord1,
-                                     /*type=*/_tokens->ivec4,
+                                     /*type=*/_tokens->ivec3,
                                      /*binding=*/drawingCoord1Binding);
 
     if (instancerNumLevels > 0) {
diff --git a/pxr/imaging/lib/hdSt/shaders/pointId.glslfx b/pxr/imaging/lib/hdSt/shaders/pointId.glslfx
index b3d3b03f..8518053c 100644
--- a/pxr/imaging/lib/hdSt/shaders/pointId.glslfx
+++ b/pxr/imaging/lib/hdSt/shaders/pointId.glslfx
@@ -32,12 +32,9 @@
 
 flat out int vsPointId;
 
-// Forward declare accessor method defined via code gen
-int GetBaseVertexOffset();
-
 void ProcessPointId()
 {
-    vsPointId = gl_VertexID - GetBaseVertexOffset();
+    vsPointId = gl_VertexID;
 }
 
 --- --------------------------------------------------------------------------
-- 
2.13.0.windows.1

